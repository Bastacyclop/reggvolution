use reggvolution::*;

fn main() {
  let mm: RiseExpr = "(typeOf (lam (typeOf (lam (typeOf (lam (typeOf (lam (typeOf (lam (typeOf (app (typeOf (app (typeOf map (app (app fun (app (app fun (app (app arrT %2) f32)) (app (app arrT %3) f32))) (app (app fun (app (app arrT %4) (app (app arrT %2) f32))) (app (app arrT %4) (app (app arrT %3) f32))))) (typeOf (lam (typeOf (app (typeOf (app (typeOf map (app (app fun (app (app fun (app (app arrT %3) f32)) f32)) (app (app fun (app (app arrT %4) (app (app arrT %3) f32))) (app (app arrT %4) f32)))) (typeOf (lam (typeOf (app (typeOf (app (typeOf (app (typeOf reduce (app (app fun (app (app fun f32) (app (app fun f32) f32))) (app (app fun f32) (app (app fun (app (app arrT %4) f32)) f32)))) (typeOf add (app (app fun f32) (app (app fun f32) f32)))) (app (app fun f32) (app (app fun (app (app arrT %4) f32)) f32))) (typeOf 0.0 f32)) (app (app fun (app (app arrT %4) f32)) f32)) (typeOf (app (typeOf (app (typeOf map (app (app fun (app (app fun (app (app pairT f32) f32)) f32)) (app (app fun (app (app arrT %4) (app (app pairT f32) f32))) (app (app arrT %4) f32)))) (typeOf (lam (typeOf (app (typeOf (app (typeOf mul (app (app fun f32) (app (app fun f32) f32))) (typeOf (app (typeOf fst (app (app fun (app (app pairT f32) f32)) f32)) (typeOf %3 (app (app pairT f32) f32))) f32)) (app (app fun f32) f32)) (typeOf (app (typeOf snd (app (app fun (app (app pairT f32) f32)) f32)) (typeOf %3 (app (app pairT f32) f32))) f32)) f32)) (app (app fun (app (app pairT f32) f32)) f32))) (app (app fun (app (app arrT %4) (app (app pairT f32) f32))) (app (app arrT %4) f32))) (typeOf (app (typeOf (app (typeOf zip (app (app fun (app (app arrT %4) f32)) (app (app fun (app (app arrT %4) f32)) (app (app arrT %4) (app (app pairT f32) f32))))) (typeOf %4 (app (app arrT %4) f32))) (app (app fun (app (app arrT %4) f32)) (app (app arrT %4) (app (app pairT f32) f32)))) (typeOf %3 (app (app arrT %4) f32))) (app (app arrT %4) (app (app pairT f32) f32)))) (app (app arrT %4) f32))) f32)) (app (app fun (app (app arrT %3) f32)) f32))) (app (app fun (app (app arrT %4) (app (app arrT %3) f32))) (app (app arrT %4) f32))) (typeOf (app (typeOf transpose (app (app fun (app (app arrT %3) (app (app arrT %4) f32))) (app (app arrT %4) (app (app arrT %3) f32)))) (typeOf %4 (app (app arrT %3) (app (app arrT %4) f32)))) (app (app arrT %4) (app (app arrT %3) f32)))) (app (app arrT %4) f32))) (app (app fun (app (app arrT %2) f32)) (app (app arrT %3) f32)))) (app (app fun (app (app arrT %4) (app (app arrT %2) f32))) (app (app arrT %4) (app (app arrT %3) f32)))) (typeOf %4 (app (app arrT %4) (app (app arrT %2) f32)))) (app (app arrT %4) (app (app arrT %3) f32)))) (app (app fun (app (app arrT %1) (app (app arrT %2) f32))) (app (app arrT %3) (app (app arrT %2) f32))))) (app (app fun (app (app arrT %2) (app (app arrT %0) f32))) (app (app fun (app (app arrT %0) (app (app arrT %1) f32))) (app (app arrT %2) (app (app arrT %1) f32)))))) (lam (app (app fun (app (app arrT %2) (app (app arrT %0) f32))) (app (app fun (app (app arrT %0) (app (app arrT %1) f32))) (app (app arrT %2) (app (app arrT %1) f32))))))) (lam (lam (app (app fun (app (app arrT %2) (app (app arrT %0) f32))) (app (app fun (app (app arrT %0) (app (app arrT %1) f32))) (app (app arrT %2) (app (app arrT %1) f32)))))))) (lam (lam (lam (app (app fun (app (app arrT %2) (app (app arrT %0) f32))) (app (app fun (app (app arrT %0) (app (app arrT %1) f32))) (app (app arrT %2) (app (app arrT %1) f32))))))))".parse().unwrap();

  println!("{}", mm.pretty(80));
}